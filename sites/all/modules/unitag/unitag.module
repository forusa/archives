<?php

/**
 * @file
 *   Unitag module: This module allows administrators an avenue to manage free
 *   tagging terms while still encouraging users to suggest new terms. For
 *   example, unitag allows the use of the synonyms feature of the taxonomy
 *   module to merge synonymous free tags with their parent terms. This could be
 *   used to curb common typos and alternate spelling issues, thereby resulting
 *   in a cleaner taxonomy.
 * @author
 *   Karthik Kumar / Zen [ http://drupal.org/user/21209 ].
 * @internal
 *   - Need to review how duplicates are being handled.
 *   - Perhaps add a hook or make sanitisation overrideable?
 *   - Consider implementing a "ban" table.
 */

/**
 * Implementation of hook_menu().
 */
function unitag_menu() {
  $items = array();

  $items['admin/content/taxonomy/unitag'] = array(
    'title' => 'Unitag',
    'description' => 'Configure the unitag module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unitag_manage_suggestions_form'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'unitag.admin.inc'
  );
  $items['admin/content/taxonomy/unitag/manage'] = array(
    'title' => 'Manager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unitag_manage_suggestions_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'unitag.admin.inc'
  );
  $items['admin/content/taxonomy/unitag/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unitag_settings_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'unitag.admin.inc'
  );
  $items['admin/content/taxonomy/unitag/manage/suggestions'] = array(
    'title' => 'Manage suggestions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unitag_manage_suggestions_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'unitag.admin.inc'
  );
  $items['admin/content/taxonomy/unitag/manage/%/edit'] = array(
    'title' => 'Edit suggestion',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unitag_edit_suggestion_form', 5),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_CALLBACK,
    'file' => 'unitag.admin.inc'
  );
  $items['admin/content/taxonomy/unitag/manage/blacklist'] = array(
    'title' => 'Manage blacklist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unitag_manage_blacklist_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'unitag.admin.inc',
    'weight' => 2
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function unitag_nodeapi(&$node, $op, $teaser, $page) {
  // We are not going to bother with the delete op as the suggestion for a new
  // term will possibly still be valid. The same applies to node updates - old
  // suggestions will continue to be retained.
  if ($op == 'insert' || $op == 'update') {
    if (isset($node->unitag_suggestions)) {
      $suggestion_list = array();
      foreach ($node->unitag_suggestions as $vid => $suggestions) {
        foreach ($suggestions as $suggestion) {
          unitag_suggestion_save($node->nid, $vid, $suggestion);
          $suggestion_list[] = $suggestion;
        }
      }
      if (!empty($suggestion_list)) {
        drupal_set_message(t('The following tags have been added to the moderation queue: %tags', array('%tags' => implode(', ', $suggestion_list))));
      }
    }

    if (!empty($node->unitag_blacklisted)) {
      drupal_set_message(t('The following tags have been denied: %tags', array('%tags' => implode(', ', $node->unitag_blacklisted))));
    }
  }
  elseif ($op == 'delete') {
    db_query("DELETE FROM {unitag} WHERE nid = %d", $node->nid);
  }
}

/**
 * Implementation of hook_taxonomy().
 */
function unitag_taxonomy($op, $type, $vocabulary = NULL) {
  // Clear vocabulary suggestions when the vocabulary is deleted.
  if ($type = 'vocabulary' && $op == 'delete') {
    db_query("DELETE FROM {unitag} WHERE vid = %d", $vocabulary['vid']);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function unitag_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    // Insert validation handler where the tags can be managed.
    $form['#validate'][] = 'unitag_node_form_validate';
  }
}

/**
 * Validate node_form submissions. Parse associated free tag vocabularies for
 * new terms and pass them to hook_nodeapi if necessary.
 */
function unitag_node_form_validate($form, &$form_state) {
  if (isset($form_state['values']['taxonomy']) && isset($form_state['values']['taxonomy']['tags']) && $form_state['values']['op'] == t('Save')) {
    $terms_new = $terms_blacklisted = array();
    // While we should ideally check if unitag is configured for these
    // vocabularies, free-tagging vocabularies which only selectively have
    // unitag working on them are more or less considered to be edge cases.
    foreach ($form_state['values']['taxonomy']['tags'] as $vid => $tags) {
      // Resolve tags as per configuration.
      $resolved = unitag_taxonomy_terms_resolve_tags($vid, $tags);
      if (!empty($resolved['new'])) {
        $terms_new[$vid] = $resolved['new'];
      }

      if (!empty($resolved['blacklisted'])) {
        $terms_blacklisted += $resolved['blacklisted'];
      }

      // Overwrite current tags with the resolved ones.
      form_set_value(array('#parents' => array('taxonomy', 'tags', $vid)), '"'. implode('", "', $resolved['parsed']) .'"', $form_state);
    }

    // For readonly vocabularies, pass new terms to hook_nodeapi to allow
    // the admin to manage them. A submit handler is not being used here as the
    // nid is only available to hook_nodeapi for the insert op.
    if (!empty($terms_new)) {
      form_set_value(array('#parents' => array('unitag_suggestions')), $terms_new, $form_state);
      form_set_value(array('#parents' => array('unitag_blacklisted')), $terms_blacklisted, $form_state);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function unitag_theme() {
  return array(
    'unitag_manage_suggestions_form' => array(
      'arguments' => array('form')
    ),
    'unitag_manage_blacklist_form' => array(
      'arguments' => array('form')
    )
  );
}

/**
 * Resolve free-tag suggestions into existing terms and new terms as per
 * the module configuration.
 *
 * @param Integer $vid
 *   The vocabulary ID of the free-tag vocabulary associated with $tags.
 * @param String $tags
 *   A string of tags separated by commas and possibly quoted.
 *
 * @return Array
 *   An associative array with keys 'parsed', 'new' and 'blacklisted containing
 *   existing, new and blacklisted terms respectively.
 */
function unitag_taxonomy_terms_resolve_tags($vid, $tags) {
  $unitag_config = unitag_variable_get();

  $typed_terms = unitag_taxonomy_terms_parse_tags($tags);
  $tags_parsed = $terms_new = $terms_blacklisted = array();

  foreach ($typed_terms as $typed_term) {
    // Skip blacklisted terms.
    if (_unitag_blacklist_check($typed_term, $vid)) {
      $terms_blacklisted[] = $typed_term;
      watchdog('taxonomy', 'Unitag: Blocked %name as a suggestion as it is on the blacklist.', array('%name' => $typed_term), WATCHDOG_NOTICE);
      continue;
    }

    // If the typed term has been resolved, $found will contain the tid.
    $found = 0;

    // Convert all tags to lower-case if so configured.
    if (in_array($vid, $unitag_config['lower'])) {
      $typed_term = strtolower($typed_term);
    }

    // Sanitise the tag prior to save.
    if (in_array($vid, $unitag_config['sanitise'])) {
      $typed_term = _unitag_sanitise($typed_term);
    }

    // See if the term exists in the chosen vocabulary and save the tid.
    $possibility = unitag_taxonomy_get_term_by_name($typed_term, $vid);
    if ($possibility) {
      $found = $possibility->tid;
      $tags_parsed[$possibility->tid] = $possibility->name;
    }

    if (!$found && in_array($vid, $unitag_config['synonym'])) {
      // See if the string exists as a synonym and save the root tid.
      $possibility = unitag_taxonomy_get_synonym_root($typed_term, $vid);
      if ($possibility) {
        $found = $possibility->tid;
        $tags_parsed[$possibility->tid] = $possibility->name;
      }
    }

    // Check for related terms after synonym checks to ensure that any
    // resulting terms are also checked.
    if ($found && in_array($vid, $unitag_config['related'])) {
      // If related terms exist for this tid, insert them as well.
      $possibilities = taxonomy_get_related($found);
      foreach ($possibilities as $tid => $possibility) {
        $tags_parsed[$tid] = $possibility->name;
      }
    }

    // Insert ancestral terms after synonym and related term checks to
    // ensure that any resulting terms are also in the queue.
    if ($found && in_array($vid, $unitag_config['ancestor'])) {
      // If ancestral terms exist for this tid, insert them as well.
      $possibilities = taxonomy_get_parents_all($found);
      foreach ($possibilities as $tid => $possibility) {
        $tags_parsed[$possibility->tid] = $possibility->name;
      }
    }

    // This is a new term.
    if (!$found) {
      $terms_new[] = $typed_term;
    }
  }

  if (!in_array($vid, $unitag_config['readonly'])) {
    // Add new terms - use array_merge to ensure that numeric indices are
    // not overwritten.
    $tags_parsed = array_merge($tags_parsed, $terms_new);
    $terms_new = array();
  }

  return array('parsed' => $tags_parsed, 'new' => $terms_new, 'blacklisted' => $terms_blacklisted);
}

/**
 * Parses a string of tags.
 *
 * @param $tags
 *   A string of tags separated by commas and possibly quoted.
 *
 * @return A unique array of tags.
 */
function unitag_taxonomy_terms_parse_tags($tags) {
  // This regexp allows the following types of user input:
  // this, "somecompany, llc", "and ""this"" w,o.rks", foo bar
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $tags, $matches);
  foreach ($matches[1] as $id => $tag) {
    // If a user has escaped a term (to demonstrate that it is a group, or
    // includes a comma or quote character), we remove the escape formatting so
    // to save the term into the database as the user intends.
    $matches[1][$id] = trim(str_replace('""', '"', preg_replace('/^"(.*)"$/', '\1', $tag)));
    if ($matches[1][$id] == "") {
      unset($matches[1][$id]);
    }
  }

  // Weed out duplicates (with case insensitive checks).
  $terms = _unitag_array_iunique($matches[1]);

  return $terms;
}

/**
 * Try to map a string to an existing term, as for glossary use.
 *
 * Provides a case-insensitive and trimmed mapping, to maximize the
 * likelihood of a successful match.
 *
 * @param name
 *   Name of the term to search for.
 *
 * @return
 *   An array of matching term objects.
 */
function unitag_taxonomy_get_term_by_name($name, $vid) {
  $db_result = db_query(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE LOWER('%s') LIKE LOWER(t.name) AND t.vid = %d", 't', 'tid'), trim($name), $vid);

  return db_fetch_object($db_result);
}

/**
 * Try to map a string to an existing term, as for glossary use.
 *
 * Provides a case-insensitive and trimmed mapping, to maximize the
 * likelihood of a successful match.
 *
 * @param name
 *   Name of the term to search for.
 *
 * @return
 *   An array of matching term objects.
 */
function unitag_taxonomy_get_synonym_root($name, $vid) {
  $db_result = db_query(db_rewrite_sql("SELECT td.name, td.tid FROM {term_synonym} ts INNER JOIN {term_data} td ON (ts.tid = td.tid) WHERE LOWER('%s') LIKE LOWER(ts.name) AND td.vid = %d", 'td', 'tid'), trim($name), $vid);

  return db_fetch_object($db_result);
}

/**
 * Return a unitag module variable.
 *
 * @param $name
 *   The name of the variable to retrieve.
 * @return
 *   The value of the variable requested.
 */
function unitag_variable_get($name = NULL) {
  static $variables = array();

  if (empty($variables)) {
    // By default, unitag does nothing to any free-tagging vocabulary.
    $defaults = array(
      'readonly' => array(),
      'lower' => array(),
      'sanitise' => array(),
      'synonym' => array(),
      'related' => array(),
      'ancestor' => array()
    );
    $variables = variable_get('unitag', array());
    $variables = array_merge($defaults, $variables);
  }

  return $name ? $variables[$name] : $variables;
}

/**
 * Load a particular suggestion.
 *
 * @param Integer $utid
 *   The utid of the suggestion to load.
 */
function unitag_suggestion_load($utid) {
  return db_fetch_object(db_query("SELECT * FROM {unitag} WHERE utid = %d", $utid));
}

/**
 * Save suggestion in the unitag table.
 *
 * @param Integer $nid
 *   The node ID to associate with the suggestion.
 * @param Integer $vid
 *   The Vocabulary ID of the vocabulary associated with the suggestion.
 * @param String $suggestion
 *   The suggestion to save.
 */
function unitag_suggestion_save($nid, $vid, $suggestion) {
  // Perform the equivalent of a REPLACE. This ensures that case corrections
  // go into the database correctly.
  $basename = _unitag_get_basename($suggestion);
  db_query("DELETE FROM {unitag} WHERE nid = %d AND vid = %d AND basename = '%s'", $nid, $vid, $basename);
  db_query("INSERT INTO {unitag} (nid, vid, name, basename) VALUES (%d, %d, '%s', '%s')", $nid, $vid, $suggestion, $basename);

  watchdog('taxonomy', 'Unitag: Added %name as a suggestion for node <a href="!url">%nid</a>.', array('%name' => $suggestion, '!url' => url('node/'. $nid), '%nid' => $nid), WATCHDOG_NOTICE);
}

/**
 * Save suggestion as a new term.
 *
 * @param Object $suggestion
 *   The suggestion to save.
 */
function unitag_suggestion_save_term($suggestion, $parents = array()) {
  $term = array(
    'vid' => $suggestion->vid,
    'name' => $suggestion->name,
    'description' => '',
    'parent' => $parents,
    'weight' => 0
  );
  taxonomy_save_term($term);
  watchdog('taxonomy', 'Unitag: Added new term %name.', array('%name' => $suggestion->name), WATCHDOG_NOTICE);

  return $term;
}

/**
 * Save suggestion as a synonym.
 *
 * @param Object $suggestion
 *   The suggestion to save.
 */
function unitag_suggestion_save_synonym($suggestion, $term) {
  db_query("INSERT INTO {term_synonym} (tid, name) VALUES (%d, '%s')", $term->tid, trim($suggestion->name));

  watchdog('taxonomy', 'Unitag: Added %name as a synonym of %term.', array('%name' => $suggestion->name, '%term' => $term->name), WATCHDOG_NOTICE);

  return $term;
}

/**
 * Associate a suggestion which is now also a term, with any nodes which
 * originally recommended its inclusion.
 *
 * @param Object $suggestion
 *   The suggestion to associate.
 * @param Object $term
 *   The term which is to be registered with the node.
 */
function unitag_association_register($suggestion, $term) {
  $result = db_query("SELECT u.nid, n.vid FROM {unitag} u INNER JOIN {node} n USING (nid) WHERE u.name = '%s' AND u.vid = %d", $suggestion->name, $suggestion->vid);
  while ($unitag = db_fetch_array($result)) {
    $unitag['tid'] = $term['tid'];
    drupal_write_record('term_node', $unitag);
  }
}

/**
 * Retrieve all available suggestions.
 *
 * @param $blacklist
 *   If TRUE, this function will retrieve only blacklisted items.
 * @param $pager
 *   The number of entries to return (per page).
 * @return Array
 *   An array of suggestions.
 */
function unitag_suggestions_get($blacklist = FALSE, $pager = 25) {
  if ($blacklist) {
    $result = pager_query("SELECT * FROM {unitag} WHERE blacklist = 1 ORDER BY name, vid ASC", $pager);
  }
  else {
    $result = pager_query("SELECT u.*, n.title FROM {unitag} u INNER JOIN {node} n USING (nid) WHERE u.blacklist = 0 ORDER BY u.name, u.vid, u.nid ASC", $pager);
  }

  $suggestions = array();
  while ($suggestion = db_fetch_object($result)) {
    $suggestions[$suggestion->utid] = $suggestion;
  }

  return $suggestions;
}

/**
 * Delete a suggestion.
 *
 * @param $suggestion
 *   The suggestion object which is to be deleted.
 * @param $all
 *   Optional boolean which controls if all suggestions with the same name and
 * in the same vocabulary are also to be deleted.
 */
function unitag_suggestion_delete($suggestion, $all = FALSE) {
  // Delete this entry.
  db_query("DELETE FROM {unitag} WHERE utid = %d", $suggestion->utid);
  if ($all) {
    // Delete other entries of the same name for the same vocabulary.
    db_query("DELETE FROM {unitag} WHERE name = '%s' AND vid = %d", $suggestion->name, $suggestion->vid);
  }

  watchdog('taxonomy', 'Unitag: deleted suggestion %name.', array('%name' => $suggestion->name), WATCHDOG_NOTICE);
}

/**
 * Blacklist a suggestion.
 *
 * @param $suggestion
 *   The suggestion object which is to be blacklisted.
 * @param $all
 *   Optional boolean which controls if the suggestion should be blacklisted for
 *   all vocabularies.
 *
 */
function unitag_suggestion_blacklist($suggestion, $all = FALSE) {
  if ($all) {
    // Blacklist term for all vocabularies.
    db_query("UPDATE {unitag} SET blacklist = 1, vid = 0 WHERE utid = %d", $suggestion->utid);
  }
  else {
    // Blacklist term for current vocabulary.
    db_query("UPDATE {unitag} SET blacklist = 1 WHERE utid = %d", $suggestion->utid);
  }
  // We are not removing the nid of the associated node. Might actually prove
  // useful somewhere.

  watchdog('taxonomy', 'Unitag: blacklisted suggestion %name.', array('%name' => $suggestion->name), WATCHDOG_NOTICE);
}

/**
 * Trim and extract the unique elements of an array while retaining the original
 * case of each element (the first instance thereof).
 *
 * @param $array
 *   The array to process.
 * @return Array
 *   An array of unique terms.
 */
function _unitag_array_iunique($array) {
  return array_intersect_key($array, array_unique(array_map('strtolower', array_map('trim', $array))));
}

/**
 * Retrieve all tag vocabularies.
 *
 * @return $vocabularies
 *   An associative array of vocabulary IDs to vocabulary names.
 */
function _unitag_get_vocabularies() {
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    if ($vocabulary->tags) {
      $vocabularies[$vid] = check_plain($vocabulary->name);
    }
    else {
      unset($vocabularies[$vid]);
    }
  }

  return $vocabularies;
}

/**
 * Get a base string for a suggestion to aid in duplicate checking.
 *
 * @param String $suggestion
 *   Input suggestion string.
 * @return String
 *   The sanitised base string.
 */
function _unitag_get_basename($suggestion) {
  return strtolower(_unitag_sanitise($suggestion));
}

/**
 * Return a sanitised string for a suggestion.
 *
 * @param String $suggestion
 *   Input suggestion string.
 * @return String
 *   The sanitised string.
 */
function _unitag_sanitise($suggestion) {
  // @TODO This should probably be expanded to include punctuation trimming etc.
  return preg_replace('/\s\s+/', ' ', $suggestion);
}

/**
 * Check if a term has been blacklisted.
 * @param $term
 *   The term to check.
 * @param $vid
 *   The vocabulary ID of the associated vocabulary (or 0 for all vocabularies).
 */
function _unitag_blacklist_check($term, $vid) {
  return db_result(db_query("SELECT COUNT(*) FROM {unitag} WHERE blacklist = 1 AND basename = '%s' AND (vid = %d OR vid = 0)", _unitag_get_basename($term), $vid));
}
