<?php

/**
 * Implements hook_user.
 */
function password_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      // Load in the new password hashes.
      $account->password = db_result(db_query("SELECT pass FROM {user_password} WHERE uid = %d", $account->uid));
      break;
    case 'login':
      // For users logging in that don't already have a new password hash,
      // ensure we generate a new hash for them.
      if (!empty($edit['pass']) && empty($account->password)) {
        password_user_rehash_password($account, trim($edit['pass']));
      }
      break;
    case 'insert':
    case 'after_update':
      // Support importing legacy passwords.
      if (isset($edit['password'])) {
        if (empty($account->password)) {
          db_query("INSERT INTO {user_password} (uid, pass) VALUES (%d, '%s')", $account->uid, $edit['password']);
        }
        else {
          db_query("UPDATE {user_password} SET pass = '%s' WHERE uid = %d", $edit['password'], $account->uid);
        }
        $edit['password'] = NULL;
      }
      // Catch password changes and update the password hash.
      if (!empty($edit['pass'])) {
        password_user_rehash_password($account, trim($edit['pass']));
      }
      break;
    case 'delete':
      db_query("DELETE FROM {user_password} WHERE uid = %d", $account->uid);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function password_form_alter(&$form, $form_state, $form_id) {
  // Perform replacement of the core validation functions.
  if (!empty($form['#validate'])) {
    _password_replace_array_value($form['#validate'], array(
      'user_login_authenticate_validate' => 'password_user_login_authenticate_validate',
      //'user_login_final_validate' => 'password_user_login_final_validate',
    ));
  }
}

/**
 * Perform a search and replace in an array.
 *
 * @param $array
 *   The array to modifiy by reference.
 * @param $replacements
 *   An array of replacement values keyed by the search value.
 */
function _password_replace_array_value(array &$array, array $replacements) {
  foreach ($replacements as $search => $replace) {
    $key = array_search($search, $array);
    if ($key !== FALSE) {
      $array[$key] = $replace;
    }
  }
}

/**
 * Load the pluggable password.inc file.
 *
 * @deprecated
 */
function _password_include() {
  require_once variable_get('password_inc', drupal_get_path('module', 'password') . '/password.inc');
}

/**
 * Duplicate of user_login_authenticate_validate().
 */
function password_user_login_authenticate_validate($form, &$form_state) {
  $form_state['values']['pass'] = trim($form_state['values']['pass']);
  password_user_authenticate($form_state['values']);
}

function password_user_authenticate($form_values = array()) {
  global $user;

  $account = _password_load_user($form_values['name'], $form_values['pass']);
  if ($account && drupal_is_denied('mail', $account->mail)) {
    form_set_error('name', t('The name %name is registered using a reserved e-mail address and therefore could not be logged in.', array('%name' => $account->name)));
  }

  // Name and pass keys are required.
  // The user is about to be logged in, so make sure no error was previously
  // encountered in the validation process.
  if (!form_get_errors() && !empty($form_values['name']) && !empty($form_values['pass']) && $account) {
    $user = $account;
    user_authenticate_finalize($form_values);
    return $user;
  }
  else {
    watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_values['name']));
  }
}

/**
 * Load a user account by name and password.
 *
 * @param $name
 *   The user name.
 * @param $password
 *   The user password.
 */
function _password_load_user($name, $password) {
  $uid = FALSE;
  if (!empty($name) && !empty($password)) {
    $account = user_load(array('name' => $name, 'status' => 1));
    if ($account) {
      if ($account->password) {
        // Switch in the new hash into the $account->pass value.
        $old_pass = $account->pass;
        $account->pass = $account->password;

        // Allow alternate password hashing schemes.
        require_once variable_get('password_inc', drupal_get_path('module', 'password') . '/password.inc');
        if (user_check_password($password, $account)) {
          // Successful authentication.
          $uid = $account->uid;
        }

        // Switch $account->pass back to the MD5 hash.
        $account->pass = $old_pass;
      }
      else {
        // If user does not yet have a new password hash, check against the
        // MD5 hash.
        if (md5($password) == $account->pass) {
          $uid = $account->uid;
        }
      }
    }
  }
  return $uid ? $account : FALSE;
}

/**
 * Updates a user's password hash.
 *
 * @param $account
 *   A user account object.
 * @param $password
 *   The user's current password.
 */
function password_user_rehash_password($account, $password) {
  require_once variable_get('password_inc', drupal_get_path('module', 'password') . '/password.inc');
  $new_hash = user_hash_password($password);
  if ($new_hash) {
    db_query("UPDATE {user_password} SET pass = '%s' WHERE uid = %d", $new_hash, $account->uid);
    if (!db_affected_rows()) {
      db_query("INSERT INTO {user_password} (uid, pass) VALUES (%d, '%s')", $account->uid, $new_hash);
    }
  }
}

/**
 * The final validation handler on the login form.
 *
 * Sets a form error if user has not been authenticated, or if too many
 * logins have been attempted. This validation function should always
 * be the last one.
 */
function password_user_login_final_validate($form, &$form_state) {
  global $user;
  if (empty($user->uid)) {
    form_set_error('name', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))));
    watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
  }
}

/*function password_flood_register_event($name, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }
  db_query("INSERT INTO {flood} (event, hostname, timestamp) VALUES ('%s', '%s', %d)", $name, $identifier, time());
}

function password_flood_is_allowed($name, $threshold, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }
  $number = db_result(db_query("SELECT COUNT(*) FROM {flood} WHERE event = '%s' AND hostname = '%s' AND timestamp > %d", $name, $identifier, time() - $window));
  return ($number < $threshold);
}

function password_flood_clear_event($name, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }
  db_query("DELETE FROM {flood} WHERE event = '%s' AND hostname = '%s'", $name, $identifier);
}*/

if (!function_exists('drupal_random_bytes')) {
  function drupal_random_bytes($count)  {
    // $random_state does not use drupal_static as it stores random bytes.
    static $random_state, $bytes;
    // Initialize on the first call. The contents of $_SERVER includes a mix of
    // user-specific and system information that varies a little with each page.
    if (!isset($random_state)) {
      $random_state = print_r($_SERVER, TRUE);
      if (function_exists('getmypid')) {
        // Further initialize with the somewhat random PHP process ID.
        $random_state .= getmypid();
      }
      $bytes = '';
    }
    if (strlen($bytes) < $count) {
      // /dev/urandom is available on many *nix systems and is considered the
      // best commonly available pseudo-random source.
      if ($fh = @fopen('/dev/urandom', 'rb')) {
        // PHP only performs buffered reads, so in reality it will always read
        // at least 4096 bytes. Thus, it costs nothing extra to read and store
        // that much so as to speed any additional invocations.
        $bytes .= fread($fh, max(4096, $count));
        fclose($fh);
      }
      // If /dev/urandom is not available or returns no bytes, this loop will
      // generate a good set of pseudo-random bytes on any system.
      // Note that it may be important that our $random_state is passed
      // through hash() prior to being rolled into $output, that the two hash()
      // invocations are different, and that the extra input into the first one -
      // the microtime() - is prepended rather than appended. This is to avoid
      // directly leaking $random_state via the $output stream, which could
      // allow for trivial prediction of further "random" numbers.
      while (strlen($bytes) < $count) {
        $random_state = hash('sha256', microtime() . mt_rand() . $random_state);
        $bytes .= hash('sha256', mt_rand() . $random_state, TRUE);
      }
    }
    $output = substr($bytes, 0, $count);
    $bytes = substr($bytes, $count);
    return $output;
  }
}
